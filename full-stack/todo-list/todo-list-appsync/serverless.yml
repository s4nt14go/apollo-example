# NOTE: update this with your service name
service: apollo-example

# Create an optimized package for our functions
package:
  individually: true
  exclude:
    - package-lock.json
    - package.json

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    TODOS_TABLE: !Ref TodosTable

custom:
  stage: ${opt:stage, self:provider.stage}
  appSync:
    - ${file(serverless.appsync-api.yml)}

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get

  echo:
    handler: functions/echo.handler

  todo:
    handler: functions/todo.handler
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt TodosTable.Arn

  todos:
    handler: functions/todos.handler
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Scan
        Resource: !GetAtt TodosTable.Arn

  addTodo:
    handler: functions/addTodo.handler
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt TodosTable.Arn

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S